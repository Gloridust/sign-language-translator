# This workflow will test, build & upload a Python Package to test.PyPI using Pytest, Poetry & Twine

name: Check Python Package Releasablity

on:
  push:
    branches:
      - develop

permissions:
  contents: read

jobs:
  check_releasable:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: false
          virtualenvs-in-project: false

      - name: Create a virtual environment
        run: python -m venv venv

      - name: Activate the virtual environment
        run: source venv/bin/activate

      - name: Install dependencies and the Package
        run: |
          python -m pip install --upgrade pip
          pip install "twine==4.0.2" "pytest==7.4.0"
          poetry install

      - name: Run tests
        run: |
          poetry run pytest -vv

      - name: Append Build Number to version
        run: |
          PACKAGE_VERSION="$(poetry version -s).$(date +%Y%m%d%H%M%S)"
          poetry version $PACKAGE_VERSION

      - name: Build
        run: |
          poetry build

      - name: Publish to test.pypi.org
        if: success()
        run: |
          python -m twine upload --repository testpypi --username __token__ --password ${{ secrets.TEST_PYPI_API_TOKEN }} dist/*

      - name: Install published package in a new virtual environment
        run: |
          python -m venv venv2
          source venv2/bin/activate
          pip install -i https://test.pypi.org/simple/ sign-language-translator==$PACKAGE_VERSION

      - name: Run Package CLI
        run: |
          slt translate "SLT" --model-code rule-based --text-lang ur --sign-lang pk-sl --sign-format video --display false
